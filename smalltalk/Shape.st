TestCase subclass: #ShapeTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Shape'!!ShapeTest methodsFor: 'as yet unclassified' stamp: 'h 10/12/2019 22:16'!testArea	"test getArea and printArea for 2D shapes"	| circle circleArea rectangle rectangleArea expectedCircleArea expectedRectangleArea stringCircleArea stringRectangleArea expectedStringCircleArea expectedStringRectangleArea |	circle := CircleShape withRadius: 10.	rectangle := RectangleShape withWidth: 10 withHeight: 20.		circleArea := circle getArea.	rectangleArea := rectangle getArea.	stringCircleArea := circle printArea.	stringRectangleArea := rectangle printArea.		expectedCircleArea := 314.0.	expectedRectangleArea := 200.		expectedStringCircleArea := 'A circle with radius 10 has the area of 314.0'.	expectedStringRectangleArea := 'A rectangle with width 10 and height 20 has the area of 200'.		self should: [circleArea = expectedCircleArea].	self should: [rectangleArea = expectedRectangleArea].	self should: [stringRectangleArea = expectedStringRectangleArea].	self should: [stringRectangleArea = expectedStringRectangleArea].! !!ShapeTest methodsFor: 'as yet unclassified' stamp: 'h 10/12/2019 22:16'!testVolume	"test getVolume and printVolume for 3D shapes"	| sphere sphereVolume prism prismVolume expectedSphereVolume expectedPrismVolume stringSphereVolume stringPrismVolume expectedStringSphereVolume expectedStringPrismVolume |	sphere := Sphere withRadius: 10.	prism := Prism withLength: 10 withWidth: 20 withHeight: 30.		sphereVolume := sphere getVolume.	prismVolume := prism getVolume.	stringSphereVolume := sphere printVolume.	stringPrismVolume := prism printVolume.		expectedSphereVolume := 4186.666666666666.	expectedPrismVolume := 6000.		expectedStringSphereVolume := 'A sphere with radius 10 has the volume of 4186.666666666666'.	expectedStringPrismVolume := 'A prism with length 10, width 20 and height 30 has the volume of 6000'.		self should: [sphereVolume = expectedSphereVolume].	self should: [prismVolume = expectedPrismVolume].	self should: [stringSphereVolume = expectedStringSphereVolume].	self should: [stringPrismVolume = expectedStringPrismVolume].! !Object subclass: #ThreeDimensionalShape	instanceVariableNames: 'type volume'	classVariableNames: ''	poolDictionaries: ''	category: 'Shape'!!ThreeDimensionalShape methodsFor: 'accessing' stamp: 'h 10/12/2019 20:47'!type	^ type! !!ThreeDimensionalShape methodsFor: 'accessing' stamp: 'h 10/12/2019 20:47'!type: anObject	type := anObject.! !!ThreeDimensionalShape methodsFor: 'accessing' stamp: 'h 10/12/2019 20:56'!volume	^ volume! !!ThreeDimensionalShape methodsFor: 'accessing' stamp: 'h 10/12/2019 20:56'!volume: anObject	volume := anObject.! !!ThreeDimensionalShape methodsFor: 'as yet unclassified' stamp: 'h 10/12/2019 20:53'!getVolume	"get aread of a 3d shape"	| out |	out := 1.	self volume: out.	^out.! !!ThreeDimensionalShape methodsFor: 'as yet unclassified' stamp: 'h 10/12/2019 20:55'!initialize	super initialize.	self type: '3D shape'.! !!ThreeDimensionalShape methodsFor: 'as yet unclassified' stamp: 'h 10/12/2019 20:54'!printVolume	"print volume of a shape"	| string |	string := 'A ', (self type), ' with volume ',(self volume).	^string.! !ThreeDimensionalShape subclass: #Prism	instanceVariableNames: 'width height length'	classVariableNames: ''	poolDictionaries: ''	category: 'Shape'!!Prism methodsFor: 'accessing' stamp: 'h 10/12/2019 21:06'!height	^ height! !!Prism methodsFor: 'accessing' stamp: 'h 10/12/2019 21:06'!height: anObject	height := anObject.! !!Prism methodsFor: 'accessing' stamp: 'h 10/12/2019 21:06'!length	^ length! !!Prism methodsFor: 'accessing' stamp: 'h 10/12/2019 21:06'!length: anObject	length := anObject.! !!Prism methodsFor: 'accessing' stamp: 'h 10/12/2019 21:06'!width	^ width! !!Prism methodsFor: 'accessing' stamp: 'h 10/12/2019 21:06'!width: anObject	width := anObject.! !!Prism methodsFor: 'as yet unclassified' stamp: 'h 10/12/2019 21:11'!getVolume	"get volume of a rectangle"	| v |	v := self width * self height * self length.	self volume: v.	^v.! !!Prism methodsFor: 'as yet unclassified' stamp: 'h 10/12/2019 21:08'!initialize	self type: 'prism'.! !!Prism methodsFor: 'as yet unclassified' stamp: 'h 10/12/2019 21:10'!printVolume	"print out the volume of a prism"	| string |	string := 'A ', (self type), ' with length ', (self length), ', width ', (self width), ' and height ', (self height), ' has the volume of ', (self volume).	^string.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Prism class	instanceVariableNames: ''!!Prism class methodsFor: 'as yet unclassified' stamp: 'h 10/12/2019 21:55'!withLength: l withWidth: w withHeight: h	| newRectangle |	newRectangle := self new.	newRectangle length: l.	newRectangle width: w.	newRectangle height: h.	^newRectangle.! !ThreeDimensionalShape subclass: #Sphere	instanceVariableNames: 'radius'	classVariableNames: ''	poolDictionaries: ''	category: 'Shape'!!Sphere methodsFor: 'as yet unclassified' stamp: 'h 10/12/2019 21:08'!getVolume	"get volume of a sphere"	| v |	v := 4/3 * (3.14 * self radius * self radius * self radius).	self volume: v.	^v.! !!Sphere methodsFor: 'as yet unclassified' stamp: 'h 10/12/2019 20:54'!initialize	self type: 'sphere'.! !!Sphere methodsFor: 'as yet unclassified' stamp: 'h 10/12/2019 21:07'!printVolume	"print out the volume of a sphere"	| string |	string := 'A ', (self type), ' with radius ', (self radius), ' has the volume of ', (self volume).	^string.! !!Sphere methodsFor: 'accessing' stamp: 'h 10/12/2019 20:55'!radius	^ radius! !!Sphere methodsFor: 'accessing' stamp: 'h 10/12/2019 20:55'!radius: anObject	radius := anObject.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Sphere class	instanceVariableNames: ''!!Sphere class methodsFor: 'as yet unclassified' stamp: 'h 10/12/2019 21:55'!withRadius: r	| newSphere |	newSphere := self new.	newSphere radius: r.	^newSphere.! !Object subclass: #TwoDimensionalShape	instanceVariableNames: 'type area'	classVariableNames: ''	poolDictionaries: ''	category: 'Shape'!!TwoDimensionalShape methodsFor: 'initialize-release' stamp: 'h 10/12/2019 20:55'!initialize	super initialize.	self type: '2D shape'.! !!TwoDimensionalShape methodsFor: 'method' stamp: 'h 10/12/2019 20:08'!getArea	"get aread of a 2d shape"	| out |	out := 1.	self area: out.	^out.! !!TwoDimensionalShape methodsFor: 'method' stamp: 'h 10/12/2019 21:05'!printArea	"print area of a 2D shape"	| string |	string := 'A ', (self type), ' with area ',(self area).	^string.! !!TwoDimensionalShape methodsFor: 'accessing' stamp: 'h 10/12/2019 16:39'!area	^ area! !!TwoDimensionalShape methodsFor: 'accessing' stamp: 'h 10/12/2019 16:39'!area: anObject	area := anObject.! !!TwoDimensionalShape methodsFor: 'accessing' stamp: 'h 10/12/2019 20:20'!type	^ type! !!TwoDimensionalShape methodsFor: 'accessing' stamp: 'h 10/12/2019 20:20'!type: anObject	type := anObject.! !TwoDimensionalShape subclass: #CircleShape	instanceVariableNames: 'radius'	classVariableNames: ''	poolDictionaries: ''	category: 'Shape'!!CircleShape methodsFor: 'as yet unclassified' stamp: 'h 10/12/2019 21:05'!getArea	"get area of a circle"	| a |	a := 3.14 * self radius * self radius .	self area: a.	^a.	! !!CircleShape methodsFor: 'as yet unclassified' stamp: 'h 10/12/2019 20:41'!initialize	self type: 'circle'.! !!CircleShape methodsFor: 'as yet unclassified' stamp: 'h 10/12/2019 21:05'!printArea	"print out the area of a circle"	| string |	string := 'A ', (self type), ' with radius ', (self radius), ' has the area of ', (self area).	^string.! !!CircleShape methodsFor: 'accessing' stamp: 'h 10/12/2019 20:57'!radius	^ radius! !!CircleShape methodsFor: 'accessing' stamp: 'h 10/12/2019 20:57'!radius: anObject	radius := anObject.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CircleShape class	instanceVariableNames: ''!!CircleShape class methodsFor: 'as yet unclassified' stamp: 'h 10/12/2019 21:49'!withRadius: r	| newCircle |	newCircle := self new.	newCircle radius: r.	^newCircle.! !TwoDimensionalShape subclass: #RectangleShape	instanceVariableNames: 'width height'	classVariableNames: ''	poolDictionaries: ''	category: 'Shape'!!RectangleShape methodsFor: 'as yet unclassified' stamp: 'h 10/12/2019 21:07'!getArea	"get area of a rectangle"	| a |	a := self width * self height.	self area: a.	^a.! !!RectangleShape methodsFor: 'as yet unclassified' stamp: 'h 10/12/2019 20:41'!initialize	self type: 'rectangle'.! !!RectangleShape methodsFor: 'as yet unclassified' stamp: 'h 10/12/2019 21:06'!printArea	"print area of a rectangle"	| string |	string := 'A ', (self type), ' with width ', (self width), ' and height ', (self height), ' has the area of ', (self area).	^string.! !!RectangleShape methodsFor: 'accessing' stamp: 'h 10/12/2019 20:58'!height	^ height! !!RectangleShape methodsFor: 'accessing' stamp: 'h 10/12/2019 20:58'!height: anObject	height := anObject.! !!RectangleShape methodsFor: 'accessing' stamp: 'h 10/12/2019 20:58'!width	^ width! !!RectangleShape methodsFor: 'accessing' stamp: 'h 10/12/2019 20:58'!width: anObject	width := anObject.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!RectangleShape class	instanceVariableNames: ''!!RectangleShape class methodsFor: 'as yet unclassified' stamp: 'h 10/12/2019 21:51'!withWidth: w withHeight: h	| newRectangle |	newRectangle := self new.	newRectangle width: w.	newRectangle height: h.	^newRectangle.! !